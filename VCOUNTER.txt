/*
 * Copyright (C) 2014 Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * This software may be distributed under the terms of the
 * GNU General Public License ("GPL") as published by the Free Software
 * Foundation, either version 2 of that License or (at your option) any
 * later version.
 *
 * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 
SUMMARY

The "vcounters" subdirectory of ls-dbg contains "virtual registers" (or "vregs")
that  extend event counting capabilities. Specifically, when configured, the 
vregs set up configuration and collection of event counter overflow interrupts.
In effect, an addtitional 64 bits (stored in these vregs, which are actually
just non-register memory locations) are added to the counters. Support for
counting overflow interrupts applies to both the "current" actual counters
(epctr_i) and also to the "capture" counters (epcapr_i) EPU registers.

The use of these these vregs assumes that the event generation configuration has
been done elsewhere. Specifically, the following must be configured before the
vcounters can be expected to work as intended:
 * Event generation configuration (for example, having DDR1 generate events for
   DDR Read cycles)
   
 * Configuration of which counters are used to count events
 
 * Configuration of which counters make up event groups, if groups are used
 
 * Configuration of SCU events used to trigger event captures
 
With vcounters, the following capabilities are provided:
 * current epctr overflow counts are stored in vctrI registers, available for
   reading

 * latest captured values are stored in vnctrcaptI registers. The upper 32 bits
   are the vctrI value at the time of capture. The lower 32 bits are the
   captured epctrI value that was captured.
   
 * ability to turn on/off overflow interrupts and the corresponding handling
 
 * ability to send signal for interrupt capture via the vcntepecrI registers.
 
 * reservation registers that act as semaphores. These vregs can be used by
   tools to check for availability of counters, groups and events, and to
   "reserve" for themselves, if they are available. It should be noted that
   use of these registers is completely cooperative in that there is nothing
   to prevent tools from completely ignoring them, and just "hijacking" 
   resources at will.
   
VCOUNTER REGISTER SUMMARY:

vnctrctrl -- global configuration for vcount regs
vcntepecrI -- mirror epecr0-15 registers. When STS is set, infer signal,
 					and group. Initiate capture, detecting overflow. Write
 					vcntrcaptI regs accordingly
vnctrI -- 32b registers holding the OVERFLOW (only) for epctrI
vnctrcaptI -- 64b registers that contain the combined overflow count
 					(in high order 32b) and captured value (low order 32b)

Reservation Registers
Set to indicate "in use"; clear to relinquish
 	vcntrres -- counter usage reservation register. (32b used)
 	vcntrevtres -- event usage reservation register; (16b used)
 	vcntrgrpres -- group reservation register; (4b used)

 	Notes:
 	 1. groups are defined by caller by writing to appropriate epu regs
 	 2. "Reservation Registers" are to facilitate cooperative sharing of the
 	 	counters. There is no enforcement to prevent someone from "taking"
 	 	counters already being used. Instead, users should check vcntrres for
 	 	availability.
 

 vcntrctrl description
 Controls function of virtual counter
 Bit Field		Description
     	 0			0 -> Enable; Binds ISR to epctr overflow
     				1 -> Disable; Unbinds ISR from epctr overflow
     2-31			Currently Unused

 